using System;
using System.Collections.Generic;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi
    {
        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <param name="body">The particulars of the charge.

The enduring request paramaters are included if the payment relates to an enduring consent.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions.</param>
        /// <returns>PaymentResponse</returns>
        PaymentResponse CreatePayment (PaymentRequest body, Guid? requestId, Guid? xCorrelationId, Guid? idempotencyKey);
        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>Payment</returns>
        Payment GetPayment (Guid? paymentId, Guid? requestId, Guid? xCorrelationId);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PaymentsApi : IPaymentsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public PaymentsApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <param name="body">The particulars of the charge.

The enduring request paramaters are included if the payment relates to an enduring consent.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions.</param>
        /// <returns>PaymentResponse</returns>
        public PaymentResponse CreatePayment (PaymentRequest body, Guid? requestId, Guid? xCorrelationId, Guid? idempotencyKey)
        {
    
            var path = "/payments";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
 if (idempotencyKey != null) headerParams.Add("idempotency-key", ApiClient.ParameterToString(idempotencyKey)); // header parameter
            postBody = ApiClient.Serialize(body); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePayment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreatePayment: " + response.ErrorMessage, response.ErrorMessage);
    
            return (PaymentResponse) ApiClient.Deserialize(response.Content, typeof(PaymentResponse), response.Headers);
        }
    
        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>Payment</returns>
        public Payment GetPayment (Guid? paymentId, Guid? requestId, Guid? xCorrelationId)
        {
            // verify the required parameter 'paymentId' is set
            if (paymentId == null) throw new ApiException(400, "Missing required parameter 'paymentId' when calling GetPayment");
    
            var path = "/payments/{payment_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "payment_id" + "}", ApiClient.ParameterToString(paymentId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
            
            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPayment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetPayment: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Payment) ApiClient.Deserialize(response.Content, typeof(Payment), response.Headers);
        }
    
    }
}

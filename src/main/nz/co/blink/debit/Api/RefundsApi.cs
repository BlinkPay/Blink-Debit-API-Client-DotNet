using System;
using System.Collections.Generic;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApi
    {
        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <param name="body">The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>RefundResponse</returns>
        RefundResponse CreateRefund (RefundDetail body, Guid? requestId, Guid? xCorrelationId);
        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>Refund</returns>
        Refund GetRefund (Guid? refundId, Guid? requestId, Guid? xCorrelationId);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RefundsApi : IRefundsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public RefundsApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundsApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <param name="body">The particulars of the refund request.

In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.

Amount can be included if the type is a &#x60;partial_refund&#x60;.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>RefundResponse</returns>
        public RefundResponse CreateRefund (RefundDetail body, Guid? requestId, Guid? xCorrelationId)
        {
    
            var path = "/refunds";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
            postBody = ApiClient.Serialize(body); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateRefund: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateRefund: " + response.ErrorMessage, response.ErrorMessage);
    
            return (RefundResponse) ApiClient.Deserialize(response.Content, typeof(RefundResponse), response.Headers);
        }
    
        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>Refund</returns>
        public Refund GetRefund (Guid? refundId, Guid? requestId, Guid? xCorrelationId)
        {
            // verify the required parameter 'refundId' is set
            if (refundId == null) throw new ApiException(400, "Missing required parameter 'refundId' when calling GetRefund");
    
            var path = "/refunds/{refund_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "refund_id" + "}", ApiClient.ParameterToString(refundId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
            
            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetRefund: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetRefund: " + response.ErrorMessage, response.ErrorMessage);
    
            return (Refund) ApiClient.Deserialize(response.Content, typeof(Refund), response.Headers);
        }
    
    }
}

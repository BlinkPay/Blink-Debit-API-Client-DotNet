using System;
using System.Collections.Generic;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickPaymentsApi
    {
        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <param name="body">The single payment request parameters.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <param name="xCustomerIp">The customers IP address</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions.</param>
        /// <returns>CreateQuickPaymentResponse</returns>
        CreateQuickPaymentResponse CreateQuickPayment (QuickPaymentRequest body, Guid? requestId, Guid? xCorrelationId, string xCustomerIp, Guid? idempotencyKey);
        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>QuickPaymentResponse</returns>
        QuickPaymentResponse GetQuickPayment (Guid? quickPaymentId, Guid? requestId, Guid? xCorrelationId);
        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns></returns>
        void RevokeQuickPayment (Guid? quickPaymentId, Guid? requestId, Guid? xCorrelationId);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class QuickPaymentsApi : IQuickPaymentsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public QuickPaymentsApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuickPaymentsApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <param name="body">The single payment request parameters.</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <param name="xCustomerIp">The customers IP address</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions.</param>
        /// <returns>CreateQuickPaymentResponse</returns>
        public CreateQuickPaymentResponse CreateQuickPayment (QuickPaymentRequest body, Guid? requestId, Guid? xCorrelationId, string xCustomerIp, Guid? idempotencyKey)
        {
    
            var path = "/quick-payments";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
 if (xCustomerIp != null) headerParams.Add("x-customer-ip", ApiClient.ParameterToString(xCustomerIp)); // header parameter
 if (idempotencyKey != null) headerParams.Add("idempotency-key", ApiClient.ParameterToString(idempotencyKey)); // header parameter
            postBody = ApiClient.Serialize(body); // http body (model) parameter

            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateQuickPayment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling CreateQuickPayment: " + response.ErrorMessage, response.ErrorMessage);
    
            return (CreateQuickPaymentResponse) ApiClient.Deserialize(response.Content, typeof(CreateQuickPaymentResponse), response.Headers);
        }
    
        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns>QuickPaymentResponse</returns>
        public QuickPaymentResponse GetQuickPayment (Guid? quickPaymentId, Guid? requestId, Guid? xCorrelationId)
        {
            // verify the required parameter 'quickPaymentId' is set
            if (quickPaymentId == null) throw new ApiException(400, "Missing required parameter 'quickPaymentId' when calling GetQuickPayment");
    
            var path = "/quick-payments/{quick_payment_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "quick_payment_id" + "}", ApiClient.ParameterToString(quickPaymentId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
            
            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.GET, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GetQuickPayment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GetQuickPayment: " + response.ErrorMessage, response.ErrorMessage);
    
            return (QuickPaymentResponse) ApiClient.Deserialize(response.Content, typeof(QuickPaymentResponse), response.Headers);
        }
    
        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit.</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit.</param>
        /// <returns></returns>
        public void RevokeQuickPayment (Guid? quickPaymentId, Guid? requestId, Guid? xCorrelationId)
        {
            // verify the required parameter 'quickPaymentId' is set
            if (quickPaymentId == null) throw new ApiException(400, "Missing required parameter 'quickPaymentId' when calling RevokeQuickPayment");
    
            var path = "/quick-payments/{quick_payment_id}";
            path = path.Replace("{format}", "json");
            path = path.Replace("{" + "quick_payment_id" + "}", ApiClient.ParameterToString(quickPaymentId));
    
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
                         if (requestId != null) headerParams.Add("request-id", ApiClient.ParameterToString(requestId)); // header parameter
 if (xCorrelationId != null) headerParams.Add("x-correlation-id", ApiClient.ParameterToString(xCorrelationId)); // header parameter
            
            // authentication setting, if any
            String[] authSettings = new String[] { "Bearer" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.DELETE, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling RevokeQuickPayment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling RevokeQuickPayment: " + response.ErrorMessage, response.ErrorMessage);
    
            return;
        }
    
    }
}

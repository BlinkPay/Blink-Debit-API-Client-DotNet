/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// PCR (Particulars, code, reference) details.
    /// </summary>
    [DataContract(Name = "pcr")]
    public partial class Pcr : IEquatable<Pcr>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pcr" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Pcr() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pcr" /> class.
        /// </summary>
        /// <param name="particulars">The particulars (required).</param>
        /// <param name="code">The code.</param>
        /// <param name="reference">The reference.</param>
        public Pcr(string particulars = default(string), string code = default(string), string reference = default(string))
        {
            // to ensure "particulars" is required (not null)
            if (particulars == null)
            {
                throw new ArgumentNullException("particulars is a required property for Pcr and cannot be null");
            }
            this.Particulars = particulars;
            this.Code = code;
            this.Reference = reference;
        }

        /// <summary>
        /// The particulars
        /// </summary>
        /// <value>The particulars</value>
        [DataMember(Name = "particulars", IsRequired = true, EmitDefaultValue = true)]
        public string Particulars { get; set; }

        /// <summary>
        /// The code
        /// </summary>
        /// <value>The code</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The reference
        /// </summary>
        /// <value>The reference</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pcr {\n");
            sb.Append("  Particulars: ").Append(Particulars).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pcr);
        }

        /// <summary>
        /// Returns true if Pcr instances are equal
        /// </summary>
        /// <param name="input">Instance of Pcr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pcr input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Particulars == input.Particulars ||
                    (this.Particulars != null &&
                    this.Particulars.Equals(input.Particulars))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Particulars != null)
                {
                    hashCode = (hashCode * 59) + this.Particulars.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Particulars (string) maxLength
            if (this.Particulars != null && this.Particulars.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Particulars, length must be less than 12.", new [] { "Particulars" });
            }

            // Particulars (string) minLength
            if (this.Particulars != null && this.Particulars.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Particulars, length must be greater than 1.", new [] { "Particulars" });
            }

            // Particulars (string) pattern
            Regex regexParticulars = new Regex(@"[a-zA-Z0-9- &#\?:_\/,\.']{1,12}", RegexOptions.CultureInvariant);
            if (false == regexParticulars.Match(this.Particulars).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Particulars, must match a pattern of " + regexParticulars, new [] { "Particulars" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 12.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"[a-zA-Z0-9- &#\?:_\/,\.']{0,12}", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // Reference (string) maxLength
            if (this.Reference != null && this.Reference.Length > 12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 12.", new [] { "Reference" });
            }

            // Reference (string) pattern
            Regex regexReference = new Regex(@"[a-zA-Z0-9- &#\?:_\/,\.']{0,12}", RegexOptions.CultureInvariant);
            if (false == regexReference.Match(this.Reference).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, must match a pattern of " + regexReference, new [] { "Reference" });
            }

            yield break;
        }
    }

}

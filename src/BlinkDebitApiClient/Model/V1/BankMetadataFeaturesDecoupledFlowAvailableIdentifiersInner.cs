/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner
    /// </summary>
    [DataContract(Name = "bank_metadata_features_decoupled_flow_available_identifiers_inner")]
    public partial class BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner : IEquatable<BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public IdentifierType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="regex">A regex that can be used for validation of the field.</param>
        /// <param name="name">The common name of the field (required).</param>
        /// <param name="description">The description of the field and/or where to find it.</param>
        public BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner(IdentifierType type = default(IdentifierType), string regex = default(string), string name = default(string), string description = default(string))
        {
            this.Type = type;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner and cannot be null");
            }
            this.Name = name;
            this.Regex = regex;
            this.Description = description;
        }

        /// <summary>
        /// A regex that can be used for validation of the field
        /// </summary>
        /// <value>A regex that can be used for validation of the field</value>
        /// <example>&quot;^[0-9]{9}$&quot;</example>
        [DataMember(Name = "regex", EmitDefaultValue = false)]
        public string Regex { get; set; }

        /// <summary>
        /// The common name of the field
        /// </summary>
        /// <value>The common name of the field</value>
        /// <example>&quot;Access Number&quot;</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the field and/or where to find it
        /// </summary>
        /// <value>The description of the field and/or where to find it</value>
        /// <example>&quot;The nine-digit access number used to login to your internet banking&quot;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner);
        }

        /// <summary>
        /// Returns true if BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner instances are equal
        /// </summary>
        /// <param name="input">Instance of BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Regex != null)
                {
                    hashCode = (hashCode * 59) + this.Regex.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

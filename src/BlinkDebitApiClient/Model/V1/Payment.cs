/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The model for a payment.
    /// </summary>
    [DataContract(Name = "payment")]
    public partial class Payment : IEquatable<Payment>, IValidatableObject
    {
        /// <summary>
        /// The type of payment (single or enduring).
        /// </summary>
        /// <value>The type of payment (single or enduring).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,

            /// <summary>
            /// Enum Enduring for value: enduring
            /// </summary>
            [EnumMember(Value = "enduring")]
            Enduring = 2

        }


        /// <summary>
        /// The type of payment (single or enduring).
        /// </summary>
        /// <value>The type of payment (single or enduring).</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The status of the payment.
        /// </summary>
        /// <value>The status of the payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 1,

            /// <summary>
            /// Enum AcceptedSettlementInProcess for value: AcceptedSettlementInProcess
            /// </summary>
            [EnumMember(Value = "AcceptedSettlementInProcess")]
            AcceptedSettlementInProcess = 2,

            /// <summary>
            /// Enum AcceptedSettlementCompleted for value: AcceptedSettlementCompleted
            /// </summary>
            [EnumMember(Value = "AcceptedSettlementCompleted")]
            AcceptedSettlementCompleted = 3,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 4

        }


        /// <summary>
        /// The status of the payment.
        /// </summary>
        /// <value>The status of the payment.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The reason for &#x60;AcceptedSettlementCompleted&#x60;.
        /// </summary>
        /// <value>The reason for &#x60;AcceptedSettlementCompleted&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AcceptedReasonEnum
        {
            /// <summary>
            /// Enum SourceBankPaymentSent for value: source_bank_payment_sent
            /// </summary>
            [EnumMember(Value = "source_bank_payment_sent")]
            SourceBankPaymentSent = 1,

            /// <summary>
            /// Enum CardNetworkAccepted for value: card_network_accepted
            /// </summary>
            [EnumMember(Value = "card_network_accepted")]
            CardNetworkAccepted = 2

        }


        /// <summary>
        /// The reason for &#x60;AcceptedSettlementCompleted&#x60;.
        /// </summary>
        /// <value>The reason for &#x60;AcceptedSettlementCompleted&#x60;.</value>
        [DataMember(Name = "accepted_reason", EmitDefaultValue = false)]
        public AcceptedReasonEnum? AcceptedReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Payment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payment" /> class.
        /// </summary>
        /// <param name="paymentId">The payment ID (required).</param>
        /// <param name="type">The type of payment (single or enduring). (required).</param>
        /// <param name="status">The status of the payment. (required).</param>
        /// <param name="acceptedReason">The reason for &#x60;AcceptedSettlementCompleted&#x60;..</param>
        /// <param name="creationTimestamp">The timestamp that the payment was created. (required).</param>
        /// <param name="statusUpdatedTimestamp">The timestamp that the payment status was last updated. (required).</param>
        /// <param name="detail">detail (required).</param>
        /// <param name="refunds">Refunds that are related to this payment, if any. (required).</param>
        public Payment(Guid paymentId = default(Guid), TypeEnum type = default(TypeEnum), StatusEnum status = default(StatusEnum), AcceptedReasonEnum? acceptedReason = default(AcceptedReasonEnum?), DateTime creationTimestamp = default(DateTime), DateTime statusUpdatedTimestamp = default(DateTime), PaymentRequest detail = default(PaymentRequest), List<Refund> refunds = default(List<Refund>))
        {
            this.PaymentId = paymentId;
            this.Type = type;
            this.Status = status;
            this.CreationTimestamp = creationTimestamp;
            this.StatusUpdatedTimestamp = statusUpdatedTimestamp;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for Payment and cannot be null");
            }
            this.Detail = detail;
            // to ensure "refunds" is required (not null)
            if (refunds == null)
            {
                throw new ArgumentNullException("refunds is a required property for Payment and cannot be null");
            }
            this.Refunds = refunds;
            this.AcceptedReason = acceptedReason;
        }

        /// <summary>
        /// The payment ID
        /// </summary>
        /// <value>The payment ID</value>
        [DataMember(Name = "payment_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// The timestamp that the payment was created.
        /// </summary>
        /// <value>The timestamp that the payment was created.</value>
        [DataMember(Name = "creation_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreationTimestamp { get; set; }

        /// <summary>
        /// The timestamp that the payment status was last updated.
        /// </summary>
        /// <value>The timestamp that the payment status was last updated.</value>
        [DataMember(Name = "status_updated_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StatusUpdatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public PaymentRequest Detail { get; set; }

        /// <summary>
        /// Refunds that are related to this payment, if any.
        /// </summary>
        /// <value>Refunds that are related to this payment, if any.</value>
        [DataMember(Name = "refunds", IsRequired = true, EmitDefaultValue = true)]
        public List<Refund> Refunds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Payment {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AcceptedReason: ").Append(AcceptedReason).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  StatusUpdatedTimestamp: ").Append(StatusUpdatedTimestamp).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payment);
        }

        /// <summary>
        /// Returns true if Payment instances are equal
        /// </summary>
        /// <param name="input">Instance of Payment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.AcceptedReason == input.AcceptedReason ||
                    this.AcceptedReason.Equals(input.AcceptedReason)
                ) && 
                (
                    this.CreationTimestamp == input.CreationTimestamp ||
                    (this.CreationTimestamp != null &&
                    this.CreationTimestamp.Equals(input.CreationTimestamp))
                ) && 
                (
                    this.StatusUpdatedTimestamp == input.StatusUpdatedTimestamp ||
                    (this.StatusUpdatedTimestamp != null &&
                    this.StatusUpdatedTimestamp.Equals(input.StatusUpdatedTimestamp))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    input.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.AcceptedReason.GetHashCode();
                if (this.CreationTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.CreationTimestamp.GetHashCode();
                }
                if (this.StatusUpdatedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.StatusUpdatedTimestamp.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.Refunds != null)
                {
                    hashCode = (hashCode * 59) + this.Refunds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

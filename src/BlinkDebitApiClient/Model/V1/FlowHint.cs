/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// Optionally include a hint to the Gateway of which flow should be used, allowing the customers details to be prefilled in order to make the checkout experience faster. You can also use Gateway flow hint to instruct Gateway to identify a customer using their last consent ID for mobile payments.
    /// </summary>
    [DataContract(Name = "flow-hint")]
    public partial class FlowHint : IEquatable<FlowHint>, IValidatableObject
    {
        /// <summary>
        /// The flow hint type, i.e. Redirect or Decoupled.
        /// </summary>
        /// <value>The flow hint type, i.e. Redirect or Decoupled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Redirect for value: redirect
            /// </summary>
            [EnumMember(Value = "redirect")]
            Redirect = 1,

            /// <summary>
            /// Enum Decoupled for value: decoupled
            /// </summary>
            [EnumMember(Value = "decoupled")]
            Decoupled = 2

        }


        /// <summary>
        /// The flow hint type, i.e. Redirect or Decoupled.
        /// </summary>
        /// <value>The flow hint type, i.e. Redirect or Decoupled.</value>
        /// <example>&quot;redirect&quot;</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name = "bank", IsRequired = true, EmitDefaultValue = true)]
        public Bank Bank { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowHint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlowHint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowHint" /> class.
        /// </summary>
        /// <param name="type">The flow hint type, i.e. Redirect or Decoupled. (required).</param>
        /// <param name="bank">bank (required).</param>
        public FlowHint(TypeEnum type = default(TypeEnum), Bank bank = default(Bank))
        {
            this.Type = type;
            this.Bank = bank;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlowHint {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowHint);
        }

        /// <summary>
        /// Returns true if FlowHint instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowHint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowHint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Bank == input.Bank ||
                    this.Bank.Equals(input.Bank)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

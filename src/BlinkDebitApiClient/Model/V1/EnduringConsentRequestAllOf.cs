/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The enduring consent detail
    /// </summary>
    [DataContract(Name = "enduring_consent_request_allOf")]
    public partial class EnduringConsentRequestAllOf : IEquatable<EnduringConsentRequestAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public Period Period { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentRequestAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnduringConsentRequestAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentRequestAllOf" /> class.
        /// </summary>
        /// <param name="flow">flow (required).</param>
        /// <param name="fromTimestamp">The ISO 8601 start date to calculate the periods for which to calculate the consent period. (required).</param>
        /// <param name="expiryTimestamp">The ISO 8601 timeout for when an enduring consent will expire. If this field is blank, an indefinite request will be attempted..</param>
        /// <param name="period">period (required).</param>
        /// <param name="maximumAmountPeriod">maximumAmountPeriod (required).</param>
        public EnduringConsentRequestAllOf(AuthFlow flow = default(AuthFlow), DateTime fromTimestamp = default(DateTime), DateTime expiryTimestamp = default(DateTime), Period period = default(Period), Amount maximumAmountPeriod = default(Amount))
        {
            // to ensure "flow" is required (not null)
            if (flow == null)
            {
                throw new ArgumentNullException("flow is a required property for EnduringConsentRequestAllOf and cannot be null");
            }
            this.Flow = flow;
            this.FromTimestamp = fromTimestamp;
            this.Period = period;
            // to ensure "maximumAmountPeriod" is required (not null)
            if (maximumAmountPeriod == null)
            {
                throw new ArgumentNullException("maximumAmountPeriod is a required property for EnduringConsentRequestAllOf and cannot be null");
            }
            this.MaximumAmountPeriod = maximumAmountPeriod;
            this.ExpiryTimestamp = expiryTimestamp;
        }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [DataMember(Name = "flow", IsRequired = true, EmitDefaultValue = true)]
        public AuthFlow Flow { get; set; }

        /// <summary>
        /// The ISO 8601 start date to calculate the periods for which to calculate the consent period.
        /// </summary>
        /// <value>The ISO 8601 start date to calculate the periods for which to calculate the consent period.</value>
        /// <example>&quot;2020-12-01T00:00+13:00&quot;</example>
        [DataMember(Name = "from_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime FromTimestamp { get; set; }

        /// <summary>
        /// The ISO 8601 timeout for when an enduring consent will expire. If this field is blank, an indefinite request will be attempted.
        /// </summary>
        /// <value>The ISO 8601 timeout for when an enduring consent will expire. If this field is blank, an indefinite request will be attempted.</value>
        /// <example>&quot;2021-12-01T00:00+13:00&quot;</example>
        [DataMember(Name = "expiry_timestamp", EmitDefaultValue = false)]
        public DateTime ExpiryTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAmountPeriod
        /// </summary>
        [DataMember(Name = "maximum_amount_period", IsRequired = true, EmitDefaultValue = true)]
        public Amount MaximumAmountPeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnduringConsentRequestAllOf {\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  FromTimestamp: ").Append(FromTimestamp).Append("\n");
            sb.Append("  ExpiryTimestamp: ").Append(ExpiryTimestamp).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  MaximumAmountPeriod: ").Append(MaximumAmountPeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnduringConsentRequestAllOf);
        }

        /// <summary>
        /// Returns true if EnduringConsentRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of EnduringConsentRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnduringConsentRequestAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.FromTimestamp == input.FromTimestamp ||
                    (this.FromTimestamp != null &&
                    this.FromTimestamp.Equals(input.FromTimestamp))
                ) && 
                (
                    this.ExpiryTimestamp == input.ExpiryTimestamp ||
                    (this.ExpiryTimestamp != null &&
                    this.ExpiryTimestamp.Equals(input.ExpiryTimestamp))
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.MaximumAmountPeriod == input.MaximumAmountPeriod ||
                    (this.MaximumAmountPeriod != null &&
                    this.MaximumAmountPeriod.Equals(input.MaximumAmountPeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Flow != null)
                {
                    hashCode = (hashCode * 59) + this.Flow.GetHashCode();
                }
                if (this.FromTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.FromTimestamp.GetHashCode();
                }
                if (this.ExpiryTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryTimestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Period.GetHashCode();
                if (this.MaximumAmountPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.MaximumAmountPeriod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

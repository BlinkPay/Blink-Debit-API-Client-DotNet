/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;
using System.Reflection;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The refund request model.
    /// </summary>
    [JsonConverter(typeof(RefundRequestJsonConverter))]
    [DataContract(Name = "refund-request")]
    public partial class RefundRequest : AbstractOpenAPISchema, IEquatable<RefundRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundRequest" /> class
        /// with the <see cref="AccountNumberRefundRequest" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountNumberRefundRequest.</param>
        public RefundRequest(AccountNumberRefundRequest actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundRequest" /> class
        /// with the <see cref="PartialRefundRequest" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PartialRefundRequest.</param>
        public RefundRequest(PartialRefundRequest actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundRequest" /> class
        /// with the <see cref="FullRefundRequest" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FullRefundRequest.</param>
        public RefundRequest(FullRefundRequest actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AccountNumberRefundRequest))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(FullRefundRequest))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PartialRefundRequest))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AccountNumberRefundRequest, FullRefundRequest, PartialRefundRequest");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AccountNumberRefundRequest`. If the actual instance is not `AccountNumberRefundRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountNumberRefundRequest</returns>
        public AccountNumberRefundRequest GetAccountNumberRefundRequest()
        {
            return (AccountNumberRefundRequest)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PartialRefundRequest`. If the actual instance is not `PartialRefundRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PartialRefundRequest</returns>
        public PartialRefundRequest GetPartialRefundRequest()
        {
            return (PartialRefundRequest)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FullRefundRequest`. If the actual instance is not `FullRefundRequest`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FullRefundRequest</returns>
        public FullRefundRequest GetFullRefundRequest()
        {
            return (FullRefundRequest)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundRequest {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, RefundRequest.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of RefundRequest
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of RefundRequest</returns>
        public static RefundRequest FromJson(string jsonString)
        {
            RefundRequest newRefundRequest = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newRefundRequest;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AccountNumberRefundRequest).GetProperty("AdditionalProperties") == null)
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<AccountNumberRefundRequest>(jsonString, RefundRequest.SerializerSettings));
                }
                else
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<AccountNumberRefundRequest>(jsonString, RefundRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AccountNumberRefundRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountNumberRefundRequest: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(FullRefundRequest).GetProperty("AdditionalProperties") == null)
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<FullRefundRequest>(jsonString, RefundRequest.SerializerSettings));
                }
                else
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<FullRefundRequest>(jsonString, RefundRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("FullRefundRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FullRefundRequest: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PartialRefundRequest).GetProperty("AdditionalProperties") == null)
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<PartialRefundRequest>(jsonString, RefundRequest.SerializerSettings));
                }
                else
                {
                    newRefundRequest = new RefundRequest(JsonConvert.DeserializeObject<PartialRefundRequest>(jsonString, RefundRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("PartialRefundRequest");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PartialRefundRequest: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newRefundRequest;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundRequest);
        }

        /// <summary>
        /// Returns true if RefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundRequest input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for RefundRequest
    /// </summary>
    public class RefundRequestJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(RefundRequest).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return RefundRequest.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}

/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The decoupled flow bank feature
    /// </summary>
    [DataContract(Name = "bank_metadata_features_decoupled_flow")]
    public partial class BankMetadataFeaturesDecoupledFlow : IEquatable<BankMetadataFeaturesDecoupledFlow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankMetadataFeaturesDecoupledFlow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BankMetadataFeaturesDecoupledFlow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BankMetadataFeaturesDecoupledFlow" /> class.
        /// </summary>
        /// <param name="enabled">Whether the Decoupled Flow is enabled. (required).</param>
        /// <param name="availableIdentifiers">If enabled, will show the available fields to use to identify the customer with their bank..</param>
        /// <param name="requestTimeout">ISO8601 time duration until the decoupled flow consent request times out (required).</param>
        public BankMetadataFeaturesDecoupledFlow(bool enabled = default(bool), List<BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner> availableIdentifiers = default(List<BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner>), string requestTimeout = default(string))
        {
            this.Enabled = enabled;
            // to ensure "requestTimeout" is required (not null)
            if (requestTimeout == null)
            {
                throw new ArgumentNullException("requestTimeout is a required property for BankMetadataFeaturesDecoupledFlow and cannot be null");
            }
            this.RequestTimeout = requestTimeout;
            this.AvailableIdentifiers = availableIdentifiers;
        }

        /// <summary>
        /// Whether the Decoupled Flow is enabled.
        /// </summary>
        /// <value>Whether the Decoupled Flow is enabled.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// If enabled, will show the available fields to use to identify the customer with their bank.
        /// </summary>
        /// <value>If enabled, will show the available fields to use to identify the customer with their bank.</value>
        [DataMember(Name = "available_identifiers", EmitDefaultValue = false)]
        public List<BankMetadataFeaturesDecoupledFlowAvailableIdentifiersInner> AvailableIdentifiers { get; set; }

        /// <summary>
        /// ISO8601 time duration until the decoupled flow consent request times out
        /// </summary>
        /// <value>ISO8601 time duration until the decoupled flow consent request times out</value>
        /// <example>&quot;P1DT00H00M00S&quot;</example>
        [DataMember(Name = "request_timeout", IsRequired = true, EmitDefaultValue = true)]
        public string RequestTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BankMetadataFeaturesDecoupledFlow {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AvailableIdentifiers: ").Append(AvailableIdentifiers).Append("\n");
            sb.Append("  RequestTimeout: ").Append(RequestTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankMetadataFeaturesDecoupledFlow);
        }

        /// <summary>
        /// Returns true if BankMetadataFeaturesDecoupledFlow instances are equal
        /// </summary>
        /// <param name="input">Instance of BankMetadataFeaturesDecoupledFlow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankMetadataFeaturesDecoupledFlow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.AvailableIdentifiers == input.AvailableIdentifiers ||
                    this.AvailableIdentifiers != null &&
                    input.AvailableIdentifiers != null &&
                    this.AvailableIdentifiers.SequenceEqual(input.AvailableIdentifiers)
                ) && 
                (
                    this.RequestTimeout == input.RequestTimeout ||
                    (this.RequestTimeout != null &&
                    this.RequestTimeout.Equals(input.RequestTimeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.AvailableIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableIdentifiers.GetHashCode();
                }
                if (this.RequestTimeout != null)
                {
                    hashCode = (hashCode * 59) + this.RequestTimeout.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

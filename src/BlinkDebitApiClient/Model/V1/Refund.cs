/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The model for a refund.
    /// </summary>
    [DataContract(Name = "refund")]
    public partial class Refund : IEquatable<Refund>, IValidatableObject
    {
        /// <summary>
        /// The refund status
        /// </summary>
        /// <value>The refund status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 1,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3

        }


        /// <summary>
        /// The refund status
        /// </summary>
        /// <value>The refund status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Refund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        /// <param name="refundId">The refund ID. (required).</param>
        /// <param name="status">The refund status (required).</param>
        /// <param name="creationTimestamp">The time that the refund was created. (required).</param>
        /// <param name="statusUpdatedTimestamp">The time that the status was last updated. (required).</param>
        /// <param name="accountNumber">The customer account number used or to be used for the refund. (required).</param>
        /// <param name="detail">detail (required).</param>
        public Refund(Guid refundId = default(Guid), StatusEnum status = default(StatusEnum), DateTime creationTimestamp = default(DateTime), DateTime statusUpdatedTimestamp = default(DateTime), string accountNumber = default(string), RefundRequest detail = default(RefundRequest))
        {
            this.RefundId = refundId;
            this.Status = status;
            this.CreationTimestamp = creationTimestamp;
            this.StatusUpdatedTimestamp = statusUpdatedTimestamp;
            // to ensure "accountNumber" is required (not null)
            if (accountNumber == null)
            {
                throw new ArgumentNullException("accountNumber is a required property for Refund and cannot be null");
            }
            this.AccountNumber = accountNumber;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for Refund and cannot be null");
            }
            this.Detail = detail;
        }

        /// <summary>
        /// The refund ID.
        /// </summary>
        /// <value>The refund ID.</value>
        [DataMember(Name = "refund_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid RefundId { get; set; }

        /// <summary>
        /// The time that the refund was created.
        /// </summary>
        /// <value>The time that the refund was created.</value>
        [DataMember(Name = "creation_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreationTimestamp { get; set; }

        /// <summary>
        /// The time that the status was last updated.
        /// </summary>
        /// <value>The time that the status was last updated.</value>
        [DataMember(Name = "status_updated_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StatusUpdatedTimestamp { get; set; }

        /// <summary>
        /// The customer account number used or to be used for the refund.
        /// </summary>
        /// <value>The customer account number used or to be used for the refund.</value>
        /// <example>&quot;00-0000-0000000-00&quot;</example>
        [DataMember(Name = "account_number", IsRequired = true, EmitDefaultValue = true)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public RefundRequest Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  RefundId: ").Append(RefundId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  StatusUpdatedTimestamp: ").Append(StatusUpdatedTimestamp).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refund);
        }

        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="input">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefundId == input.RefundId ||
                    (this.RefundId != null &&
                    this.RefundId.Equals(input.RefundId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreationTimestamp == input.CreationTimestamp ||
                    (this.CreationTimestamp != null &&
                    this.CreationTimestamp.Equals(input.CreationTimestamp))
                ) && 
                (
                    this.StatusUpdatedTimestamp == input.StatusUpdatedTimestamp ||
                    (this.StatusUpdatedTimestamp != null &&
                    this.StatusUpdatedTimestamp.Equals(input.StatusUpdatedTimestamp))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefundId != null)
                {
                    hashCode = (hashCode * 59) + this.RefundId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreationTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.CreationTimestamp.GetHashCode();
                }
                if (this.StatusUpdatedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.StatusUpdatedTimestamp.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountNumber (string) pattern
            Regex regexAccountNumber = new Regex(@"^\d{2}-\d{4}-\d{7}-\d{2}$", RegexOptions.CultureInvariant);
            if (false == regexAccountNumber.Match(this.AccountNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountNumber, must match a pattern of " + regexAccountNumber, new [] { "AccountNumber" });
            }

            yield break;
        }
    }

}

/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The model for a single consent request, relating to a one-off payment.
    /// </summary>
    [DataContract(Name = "single-consent-request")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(QuickPaymentRequest), "quick-payment-request")]
    public partial class SingleConsentRequest : ConsentDetail, IEquatable<SingleConsentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SingleConsentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentRequest" /> class.
        /// </summary>
        /// <param name="flow">flow (required).</param>
        /// <param name="pcr">pcr (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="type">Whether the consent is single or enduring. (required).</param>
        public SingleConsentRequest(AuthFlow flow = default(AuthFlow), Pcr pcr = default(Pcr), Amount amount = default(Amount), TypeEnum type = default(TypeEnum)) : base()
        {
            // to ensure "flow" is required (not null)
            if (flow == null)
            {
                throw new ArgumentNullException("flow is a required property for SingleConsentRequest and cannot be null");
            }
            this.Flow = flow;
            // to ensure "pcr" is required (not null)
            if (pcr == null)
            {
                throw new ArgumentNullException("pcr is a required property for SingleConsentRequest and cannot be null");
            }
            this.Pcr = pcr;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for SingleConsentRequest and cannot be null");
            }
            this.Amount = amount;
        }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [DataMember(Name = "flow", IsRequired = true, EmitDefaultValue = true)]
        public AuthFlow Flow { get; set; }

        /// <summary>
        /// Gets or Sets Pcr
        /// </summary>
        [DataMember(Name = "pcr", IsRequired = true, EmitDefaultValue = true)]
        public Pcr Pcr { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SingleConsentRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  Pcr: ").Append(Pcr).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleConsentRequest);
        }

        /// <summary>
        /// Returns true if SingleConsentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleConsentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleConsentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && base.Equals(input) && 
                (
                    this.Pcr == input.Pcr ||
                    (this.Pcr != null &&
                    this.Pcr.Equals(input.Pcr))
                ) && base.Equals(input) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Flow != null)
                {
                    hashCode = (hashCode * 59) + this.Flow.GetHashCode();
                }
                if (this.Pcr != null)
                {
                    hashCode = (hashCode * 59) + this.Pcr.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}

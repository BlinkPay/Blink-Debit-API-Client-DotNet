/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The refund detail model.
    /// </summary>
    [DataContract(Name = "refund-detail")]
    public partial class RefundDetail : IEquatable<RefundDetail>, IValidatableObject
    {
        /// <summary>
        /// The refund type.
        /// </summary>
        /// <value>The refund type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AccountNumber for value: account_number
            /// </summary>
            [EnumMember(Value = "account_number")]
            AccountNumber = 1,

            /// <summary>
            /// Enum PartialRefund for value: partial_refund
            /// </summary>
            [EnumMember(Value = "partial_refund")]
            PartialRefund = 2,

            /// <summary>
            /// Enum FullRefund for value: full_refund
            /// </summary>
            [EnumMember(Value = "full_refund")]
            FullRefund = 3

        }


        /// <summary>
        /// The refund type.
        /// </summary>
        /// <value>The refund type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RefundDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundDetail" /> class.
        /// </summary>
        /// <param name="paymentId">The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;. (required).</param>
        /// <param name="type">The refund type. (required).</param>
        public RefundDetail(Guid paymentId = default(Guid), TypeEnum type = default(TypeEnum))
        {
            this.PaymentId = paymentId;
            this.Type = type;
        }

        /// <summary>
        /// The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;.
        /// </summary>
        /// <value>The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;.</value>
        [DataMember(Name = "payment_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RefundDetail {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundDetail);
        }

        /// <summary>
        /// Returns true if RefundDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

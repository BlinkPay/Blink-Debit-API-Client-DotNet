/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// Blink Gateway consent flow
    /// </summary>
    [DataContract(Name = "gateway_flow_allOf")]
    public partial class GatewayFlowAllOf : IEquatable<GatewayFlowAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayFlowAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GatewayFlowAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayFlowAllOf" /> class.
        /// </summary>
        /// <param name="redirectUri">The URL to redirect back to once the payment is completed through the gateway. The &#x60;cid&#x60; (Consent ID) will be added as a URL parameter. If there is an error, an &#x60;error&#x60; parameter will be appended also. (required).</param>
        /// <param name="flowHint">flowHint.</param>
        public GatewayFlowAllOf(string redirectUri = default(string), GatewayFlowAllOfFlowHint flowHint = default(GatewayFlowAllOfFlowHint))
        {
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new ArgumentNullException("redirectUri is a required property for GatewayFlowAllOf and cannot be null");
            }
            this.RedirectUri = redirectUri;
            this.FlowHint = flowHint;
        }

        /// <summary>
        /// The URL to redirect back to once the payment is completed through the gateway. The &#x60;cid&#x60; (Consent ID) will be added as a URL parameter. If there is an error, an &#x60;error&#x60; parameter will be appended also.
        /// </summary>
        /// <value>The URL to redirect back to once the payment is completed through the gateway. The &#x60;cid&#x60; (Consent ID) will be added as a URL parameter. If there is an error, an &#x60;error&#x60; parameter will be appended also.</value>
        [DataMember(Name = "redirect_uri", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets FlowHint
        /// </summary>
        [DataMember(Name = "flow_hint", EmitDefaultValue = false)]
        public GatewayFlowAllOfFlowHint FlowHint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayFlowAllOf {\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  FlowHint: ").Append(FlowHint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayFlowAllOf);
        }

        /// <summary>
        /// Returns true if GatewayFlowAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayFlowAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayFlowAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && 
                (
                    this.FlowHint == input.FlowHint ||
                    (this.FlowHint != null &&
                    this.FlowHint.Equals(input.FlowHint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RedirectUri != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUri.GetHashCode();
                }
                if (this.FlowHint != null)
                {
                    hashCode = (hashCode * 59) + this.FlowHint.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

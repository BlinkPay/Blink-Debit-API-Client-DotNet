/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The payment request model.
    /// </summary>
    [DataContract(Name = "payment-request")]
    public partial class PaymentRequest : IEquatable<PaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequest" /> class.
        /// </summary>
        /// <param name="consentId">The consent ID (required).</param>
        /// <param name="enduringPayment">enduringPayment.</param>
        /// <param name="accountReferenceId">The account reference ID from account list. This is required if the account selection information was provided to you on the consents endpoint..</param>
        public PaymentRequest(Guid consentId = default(Guid), EnduringPaymentRequest enduringPayment = default(EnduringPaymentRequest), Guid accountReferenceId = default(Guid))
        {
            this.ConsentId = consentId;
            this.EnduringPayment = enduringPayment;
            this.AccountReferenceId = accountReferenceId;
        }

        /// <summary>
        /// The consent ID
        /// </summary>
        /// <value>The consent ID</value>
        [DataMember(Name = "consent_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConsentId { get; set; }

        /// <summary>
        /// Gets or Sets EnduringPayment
        /// </summary>
        [DataMember(Name = "enduring_payment", EmitDefaultValue = false)]
        public EnduringPaymentRequest EnduringPayment { get; set; }

        /// <summary>
        /// The account reference ID from account list. This is required if the account selection information was provided to you on the consents endpoint.
        /// </summary>
        /// <value>The account reference ID from account list. This is required if the account selection information was provided to you on the consents endpoint.</value>
        [DataMember(Name = "account_reference_id", EmitDefaultValue = false)]
        public Guid AccountReferenceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentRequest {\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  EnduringPayment: ").Append(EnduringPayment).Append("\n");
            sb.Append("  AccountReferenceId: ").Append(AccountReferenceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequest);
        }

        /// <summary>
        /// Returns true if PaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.EnduringPayment == input.EnduringPayment ||
                    (this.EnduringPayment != null &&
                    this.EnduringPayment.Equals(input.EnduringPayment))
                ) && 
                (
                    this.AccountReferenceId == input.AccountReferenceId ||
                    (this.AccountReferenceId != null &&
                    this.AccountReferenceId.Equals(input.AccountReferenceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                if (this.EnduringPayment != null)
                {
                    hashCode = (hashCode * 59) + this.EnduringPayment.GetHashCode();
                }
                if (this.AccountReferenceId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountReferenceId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

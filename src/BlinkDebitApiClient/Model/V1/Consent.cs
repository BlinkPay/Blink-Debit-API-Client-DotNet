/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The model for a consent.
    /// </summary>
    [DataContract(Name = "consent")]
    public partial class Consent : IEquatable<Consent>, IValidatableObject
    {
        /// <summary>
        /// The status of the consent
        /// </summary>
        /// <value>The status of the consent</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum GatewayAwaitingSubmission for value: GatewayAwaitingSubmission
            /// </summary>
            [EnumMember(Value = "GatewayAwaitingSubmission")]
            GatewayAwaitingSubmission = 1,

            /// <summary>
            /// Enum GatewayTimeout for value: GatewayTimeout
            /// </summary>
            [EnumMember(Value = "GatewayTimeout")]
            GatewayTimeout = 2,

            /// <summary>
            /// Enum AwaitingAuthorisation for value: AwaitingAuthorisation
            /// </summary>
            [EnumMember(Value = "AwaitingAuthorisation")]
            AwaitingAuthorisation = 3,

            /// <summary>
            /// Enum Authorised for value: Authorised
            /// </summary>
            [EnumMember(Value = "Authorised")]
            Authorised = 4,

            /// <summary>
            /// Enum Consumed for value: Consumed
            /// </summary>
            [EnumMember(Value = "Consumed")]
            Consumed = 5,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 6,

            /// <summary>
            /// Enum Revoked for value: Revoked
            /// </summary>
            [EnumMember(Value = "Revoked")]
            Revoked = 7

        }


        /// <summary>
        /// The status of the consent
        /// </summary>
        /// <value>The status of the consent</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Consent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Consent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Consent" /> class.
        /// </summary>
        /// <param name="consentId">The consent ID (required).</param>
        /// <param name="status">The status of the consent (required).</param>
        /// <param name="creationTimestamp">The timestamp that the consent was created (required).</param>
        /// <param name="statusUpdatedTimestamp">The time that the status was last updated (required).</param>
        /// <param name="detail">detail (required).</param>
        /// <param name="payments">Payments associated with this consent, if any. (required).</param>
        public Consent(Guid consentId = default(Guid), StatusEnum status = default(StatusEnum), DateTime creationTimestamp = default(DateTime), DateTime statusUpdatedTimestamp = default(DateTime), ConsentDetail detail = default(ConsentDetail), List<Payment> payments = default(List<Payment>))
        {
            this.ConsentId = consentId;
            this.Status = status;
            this.CreationTimestamp = creationTimestamp;
            this.StatusUpdatedTimestamp = statusUpdatedTimestamp;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for Consent and cannot be null");
            }
            this.Detail = detail;
            // to ensure "payments" is required (not null)
            if (payments == null)
            {
                throw new ArgumentNullException("payments is a required property for Consent and cannot be null");
            }
            this.Payments = payments;
        }

        /// <summary>
        /// The consent ID
        /// </summary>
        /// <value>The consent ID</value>
        [DataMember(Name = "consent_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ConsentId { get; set; }

        /// <summary>
        /// The timestamp that the consent was created
        /// </summary>
        /// <value>The timestamp that the consent was created</value>
        [DataMember(Name = "creation_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreationTimestamp { get; set; }

        /// <summary>
        /// The time that the status was last updated
        /// </summary>
        /// <value>The time that the status was last updated</value>
        [DataMember(Name = "status_updated_timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StatusUpdatedTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public ConsentDetail Detail { get; set; }

        /// <summary>
        /// If applicable, the Westpac account list for account selection. If this is included, the merchant is required to ask the customer which account they would like to debit the payment from using the information provided.
        /// </summary>
        /// <value>If applicable, the Westpac account list for account selection. If this is included, the merchant is required to ask the customer which account they would like to debit the payment from using the information provided.</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<Account> Accounts { get; private set; }

        /// <summary>
        /// Returns false as Accounts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccounts()
        {
            return false;
        }
        /// <summary>
        /// Payments associated with this consent, if any.
        /// </summary>
        /// <value>Payments associated with this consent, if any.</value>
        [DataMember(Name = "payments", IsRequired = true, EmitDefaultValue = true)]
        public List<Payment> Payments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Consent {\n");
            sb.Append("  ConsentId: ").Append(ConsentId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  StatusUpdatedTimestamp: ").Append(StatusUpdatedTimestamp).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Consent);
        }

        /// <summary>
        /// Returns true if Consent instances are equal
        /// </summary>
        /// <param name="input">Instance of Consent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Consent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ConsentId == input.ConsentId ||
                    (this.ConsentId != null &&
                    this.ConsentId.Equals(input.ConsentId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.CreationTimestamp == input.CreationTimestamp ||
                    (this.CreationTimestamp != null &&
                    this.CreationTimestamp.Equals(input.CreationTimestamp))
                ) && 
                (
                    this.StatusUpdatedTimestamp == input.StatusUpdatedTimestamp ||
                    (this.StatusUpdatedTimestamp != null &&
                    this.StatusUpdatedTimestamp.Equals(input.StatusUpdatedTimestamp))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConsentId != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.CreationTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.CreationTimestamp.GetHashCode();
                }
                if (this.StatusUpdatedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.StatusUpdatedTimestamp.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                if (this.Accounts != null)
                {
                    hashCode = (hashCode * 59) + this.Accounts.GetHashCode();
                }
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

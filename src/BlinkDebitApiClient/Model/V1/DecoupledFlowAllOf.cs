/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// Decoupled consent flow
    /// </summary>
    [DataContract(Name = "decoupled_flow_allOf")]
    public partial class DecoupledFlowAllOf : IEquatable<DecoupledFlowAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name = "bank", IsRequired = true, EmitDefaultValue = true)]
        public Bank Bank { get; set; }

        /// <summary>
        /// Gets or Sets IdentifierType
        /// </summary>
        [DataMember(Name = "identifier_type", IsRequired = true, EmitDefaultValue = true)]
        public IdentifierType IdentifierType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecoupledFlowAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DecoupledFlowAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DecoupledFlowAllOf" /> class.
        /// </summary>
        /// <param name="bank">bank (required).</param>
        /// <param name="identifierType">identifierType (required).</param>
        /// <param name="identifierValue">The identifier value. (required).</param>
        /// <param name="callbackUrl">A callback URL to call once the consent status has been updated using decoupled flow. Blink will also append the &#x60;cid&#x60; (the Consent ID) in an additional URL parameter. This is sent to your api as a GET request and will be retried up to 3 times if 5xx errors are received from your server..</param>
        public DecoupledFlowAllOf(Bank bank = default(Bank), IdentifierType identifierType = default(IdentifierType), string identifierValue = default(string), string callbackUrl = default(string))
        {
            this.Bank = bank;
            this.IdentifierType = identifierType;
            // to ensure "identifierValue" is required (not null)
            if (identifierValue == null)
            {
                throw new ArgumentNullException("identifierValue is a required property for DecoupledFlowAllOf and cannot be null");
            }
            this.IdentifierValue = identifierValue;
            this.CallbackUrl = callbackUrl;
        }

        /// <summary>
        /// The identifier value.
        /// </summary>
        /// <value>The identifier value.</value>
        [DataMember(Name = "identifier_value", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierValue { get; set; }

        /// <summary>
        /// A callback URL to call once the consent status has been updated using decoupled flow. Blink will also append the &#x60;cid&#x60; (the Consent ID) in an additional URL parameter. This is sent to your api as a GET request and will be retried up to 3 times if 5xx errors are received from your server.
        /// </summary>
        /// <value>A callback URL to call once the consent status has been updated using decoupled flow. Blink will also append the &#x60;cid&#x60; (the Consent ID) in an additional URL parameter. This is sent to your api as a GET request and will be retried up to 3 times if 5xx errors are received from your server.</value>
        /// <example>&quot;https://api.mybiller.co.nz/payments/1.0/consentresponse?secret&#x3D;SOME_SECRET&amp;id&#x3D;SOME_ID&quot;</example>
        [DataMember(Name = "callback_url", EmitDefaultValue = false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DecoupledFlowAllOf {\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  IdentifierValue: ").Append(IdentifierValue).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecoupledFlowAllOf);
        }

        /// <summary>
        /// Returns true if DecoupledFlowAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DecoupledFlowAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecoupledFlowAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bank == input.Bank ||
                    this.Bank.Equals(input.Bank)
                ) && 
                (
                    this.IdentifierType == input.IdentifierType ||
                    this.IdentifierType.Equals(input.IdentifierType)
                ) && 
                (
                    this.IdentifierValue == input.IdentifierValue ||
                    (this.IdentifierValue != null &&
                    this.IdentifierValue.Equals(input.IdentifierValue))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Bank.GetHashCode();
                hashCode = (hashCode * 59) + this.IdentifierType.GetHashCode();
                if (this.IdentifierValue != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierValue.GetHashCode();
                }
                if (this.CallbackUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The model for quick payment response.
    /// </summary>
    [DataContract(Name = "quick-payment-response")]
    public partial class QuickPaymentResponse : IEquatable<QuickPaymentResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuickPaymentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentResponse" /> class.
        /// </summary>
        /// <param name="quickPaymentId">The quick payment ID. (required).</param>
        /// <param name="consent">consent (required).</param>
        public QuickPaymentResponse(Guid quickPaymentId = default(Guid), Consent consent = default(Consent))
        {
            this.QuickPaymentId = quickPaymentId;
            // to ensure "consent" is required (not null)
            if (consent == null)
            {
                throw new ArgumentNullException("consent is a required property for QuickPaymentResponse and cannot be null");
            }
            this.Consent = consent;
        }

        /// <summary>
        /// The quick payment ID.
        /// </summary>
        /// <value>The quick payment ID.</value>
        [DataMember(Name = "quick_payment_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid QuickPaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Consent
        /// </summary>
        [DataMember(Name = "consent", IsRequired = true, EmitDefaultValue = true)]
        public Consent Consent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuickPaymentResponse {\n");
            sb.Append("  QuickPaymentId: ").Append(QuickPaymentId).Append("\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickPaymentResponse);
        }

        /// <summary>
        /// Returns true if QuickPaymentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickPaymentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickPaymentResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QuickPaymentId == input.QuickPaymentId ||
                    (this.QuickPaymentId != null &&
                    this.QuickPaymentId.Equals(input.QuickPaymentId))
                ) && 
                (
                    this.Consent == input.Consent ||
                    (this.Consent != null &&
                    this.Consent.Equals(input.Consent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuickPaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.QuickPaymentId.GetHashCode();
                }
                if (this.Consent != null)
                {
                    hashCode = (hashCode * 59) + this.Consent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BlinkDebitApiClient.Client.OpenAPIDateConverter;

namespace BlinkDebitApiClient.Model.V1
{
    /// <summary>
    /// The PCR and amount to use in the &#x60;partial_refund&#x60; request.
    /// </summary>
    [DataContract(Name = "partial-refund-request")]
    public partial class PartialRefundRequest : IEquatable<PartialRefundRequest>, IValidatableObject
    {
        /// <summary>
        /// The refund type.
        /// </summary>
        /// <value>The refund type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AccountNumber for value: account_number
            /// </summary>
            [EnumMember(Value = "account_number")]
            AccountNumber = 1,

            /// <summary>
            /// Enum PartialRefund for value: partial_refund
            /// </summary>
            [EnumMember(Value = "partial_refund")]
            PartialRefund = 2,

            /// <summary>
            /// Enum FullRefund for value: full_refund
            /// </summary>
            [EnumMember(Value = "full_refund")]
            FullRefund = 3

        }


        /// <summary>
        /// The refund type.
        /// </summary>
        /// <value>The refund type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialRefundRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PartialRefundRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialRefundRequest" /> class.
        /// </summary>
        /// <param name="paymentId">The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;. (required).</param>
        /// <param name="type">The refund type. (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="pcr">pcr (required).</param>
        /// <param name="consentRedirect">The URI that the merchant will need to visit to authorise the refund payment from their bank, if applicable..</param>
        public PartialRefundRequest(Guid paymentId = default(Guid), TypeEnum type = default(TypeEnum), Amount amount = default(Amount), Pcr pcr = default(Pcr), string consentRedirect = default(string))
        {
            this.PaymentId = paymentId;
            this.Type = type;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for PartialRefundRequest and cannot be null");
            }
            this.Amount = amount;
            // to ensure "pcr" is required (not null)
            if (pcr == null)
            {
                throw new ArgumentNullException("pcr is a required property for PartialRefundRequest and cannot be null");
            }
            this.Pcr = pcr;
            this.ConsentRedirect = consentRedirect;
        }

        /// <summary>
        /// The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;.
        /// </summary>
        /// <value>The payment ID. The payment must have a status of &#x60;AcceptedSettlementCompleted&#x60;.</value>
        [DataMember(Name = "payment_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Pcr
        /// </summary>
        [DataMember(Name = "pcr", IsRequired = true, EmitDefaultValue = true)]
        public Pcr Pcr { get; set; }

        /// <summary>
        /// The URI that the merchant will need to visit to authorise the refund payment from their bank, if applicable.
        /// </summary>
        /// <value>The URI that the merchant will need to visit to authorise the refund payment from their bank, if applicable.</value>
        [DataMember(Name = "consent_redirect", EmitDefaultValue = false)]
        public string ConsentRedirect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialRefundRequest {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Pcr: ").Append(Pcr).Append("\n");
            sb.Append("  ConsentRedirect: ").Append(ConsentRedirect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartialRefundRequest);
        }

        /// <summary>
        /// Returns true if PartialRefundRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PartialRefundRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartialRefundRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentId == input.PaymentId ||
                    (this.PaymentId != null &&
                    this.PaymentId.Equals(input.PaymentId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Pcr == input.Pcr ||
                    (this.Pcr != null &&
                    this.Pcr.Equals(input.Pcr))
                ) && 
                (
                    this.ConsentRedirect == input.ConsentRedirect ||
                    (this.ConsentRedirect != null &&
                    this.ConsentRedirect.Equals(input.ConsentRedirect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentId != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Pcr != null)
                {
                    hashCode = (hashCode * 59) + this.Pcr.GetHashCode();
                }
                if (this.ConsentRedirect != null)
                {
                    hashCode = (hashCode * 59) + this.ConsentRedirect.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

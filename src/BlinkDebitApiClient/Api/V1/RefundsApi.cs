/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Client.Auth;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Refund
        /// </summary>
        /// <remarks>
        /// Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundResponse</returns>
        RefundResponse CreateRefund(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0);

        /// <summary>
        /// Create Refund
        /// </summary>
        /// <remarks>
        /// Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundResponse</returns>
        ApiResponse<RefundResponse> CreateRefundWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0);
        /// <summary>
        /// Get Refund
        /// </summary>
        /// <remarks>
        /// Get refund by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        Refund GetRefund(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Refund
        /// </summary>
        /// <remarks>
        /// Get refund by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        ApiResponse<Refund> GetRefundWithHttpInfo(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Refund
        /// </summary>
        /// <remarks>
        /// Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundResponse</returns>
        System.Threading.Tasks.Task<RefundResponse> CreateRefundAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Refund
        /// </summary>
        /// <remarks>
        /// Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundResponse>> CreateRefundWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Refund
        /// </summary>
        /// <remarks>
        /// Get refund by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        System.Threading.Tasks.Task<Refund> GetRefundAsync(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Refund
        /// </summary>
        /// <remarks>
        /// Get refund by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        System.Threading.Tasks.Task<ApiResponse<Refund>> GetRefundWithHttpInfoAsync(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRefundsApi : IRefundsApiSync, IRefundsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RefundsApi : IRefundsApi
    {
        private BlinkDebitApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RefundsApi(string basePath)
        {
            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                new BlinkDebitApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RefundsApi(BlinkDebitApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RefundsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RefundsApi(BlinkDebitApiClient.Client.ISynchronousClient client, BlinkDebitApiClient.Client.IAsynchronousClient asyncClient, BlinkDebitApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlinkDebitApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlinkDebitApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RefundResponse</returns>
        public RefundResponse CreateRefund(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<RefundResponse> localVarResponse = CreateRefundWithHttpInfo(requestId, xCorrelationId, refundDetail);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RefundResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<RefundResponse> CreateRefundWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            localVarRequestOptions.Data = refundDetail;

            localVarRequestOptions.Operation = "RefundsApi.CreateRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RefundResponse>("/refunds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefundResponse</returns>
        public async System.Threading.Tasks.Task<RefundResponse> CreateRefundAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<RefundResponse> localVarResponse = await CreateRefundWithHttpInfoAsync(requestId, xCorrelationId, refundDetail, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Refund Create a request for refund.  Multiple money-transfer refunds can be processed aganist one payment, but for no greater than the total value of the payment.  **For money transfer refunds, a 201 response does not indicate that the refund has been processed successfully. The status needs to be subsequently checked using the GET endpoint**
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="refundDetail">The particulars of the refund request.  In the case of money transfers, PCR is included to provide reference details to the customers bank account about the refund.  Amount can be included if the type is a &#x60;partial_refund&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefundResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<RefundResponse>> CreateRefundWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), RefundDetail? refundDetail = default(RefundDetail?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            localVarRequestOptions.Data = refundDetail;

            localVarRequestOptions.Operation = "RefundsApi.CreateRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RefundResponse>("/refunds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Refund</returns>
        public Refund GetRefund(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<Refund> localVarResponse = GetRefundWithHttpInfo(refundId, requestId, xCorrelationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Refund</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Refund> GetRefundWithHttpInfo(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refund_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(refundId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "RefundsApi.GetRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Refund>("/refunds/{refund_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Refund</returns>
        public async System.Threading.Tasks.Task<Refund> GetRefundAsync(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<Refund> localVarResponse = await GetRefundWithHttpInfoAsync(refundId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Refund Get refund by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refundId">The refund ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Refund)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Refund>> GetRefundWithHttpInfoAsync(Guid refundId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("refund_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(refundId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "RefundsApi.GetRefund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Refund>("/refunds/{refund_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRefund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Copyright (c) 2023 BlinkPay
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

using System;
using System.Threading;
using System.Threading.Tasks;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Config;
using BlinkDebitApiClient.Exceptions;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IQuickPaymentsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// Create Quick Payment
    /// </summary>
    /// <remarks>
    /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CreateQuickPaymentResponse</returns>
    CreateQuickPaymentResponse CreateQuickPayment(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0);

    /// <summary>
    /// Create Quick Payment
    /// </summary>
    /// <remarks>
    /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CreateQuickPaymentResponse</returns>
    ApiResponse<CreateQuickPaymentResponse> CreateQuickPaymentWithHttpInfo(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0);

    /// <summary>
    /// Get Quick Payment
    /// </summary>
    /// <remarks>
    /// Get a quick payment by ID.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>QuickPaymentResponse</returns>
    QuickPaymentResponse GetQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

    /// <summary>
    /// Get Quick Payment
    /// </summary>
    /// <remarks>
    /// Get a quick payment by ID.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of QuickPaymentResponse</returns>
    ApiResponse<QuickPaymentResponse> GetQuickPaymentWithHttpInfo(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

    /// <summary>
    /// Revoke Quick Payment
    /// </summary>
    /// <remarks>
    /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void RevokeQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

    /// <summary>
    /// Revoke Quick Payment
    /// </summary>
    /// <remarks>
    /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<Object> RevokeQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IQuickPaymentsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// Create Quick Payment
    /// </summary>
    /// <remarks>
    /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateQuickPaymentResponse</returns>
    Task<CreateQuickPaymentResponse> CreateQuickPaymentAsync(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Create Quick Payment
    /// </summary>
    /// <remarks>
    /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateQuickPaymentResponse)</returns>
    Task<ApiResponse<CreateQuickPaymentResponse>> CreateQuickPaymentWithHttpInfoAsync(
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?),
        string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get Quick Payment
    /// </summary>
    /// <remarks>
    /// Get a quick payment by ID.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuickPaymentResponse</returns>
    Task<QuickPaymentResponse> GetQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Get Quick Payment
    /// </summary>
    /// <remarks>
    /// Get a quick payment by ID.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (QuickPaymentResponse)</returns>
    Task<ApiResponse<QuickPaymentResponse>> GetQuickPaymentWithHttpInfoAsync(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Revoke Quick Payment
    /// </summary>
    /// <remarks>
    /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task RevokeQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    /// <summary>
    /// Revoke Quick Payment
    /// </summary>
    /// <remarks>
    /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </remarks>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<Object>> RevokeQuickPaymentWithHttpInfoAsync(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken));

    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IQuickPaymentsApi : IQuickPaymentsApiSync, IQuickPaymentsApiAsync
{
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public class QuickPaymentsApi : IQuickPaymentsApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public QuickPaymentsApi() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
    /// </summary>
    /// <returns></returns>
    public QuickPaymentsApi(string basePath)
    {
        Configuration = BlinkDebitApiClient.Config.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration);
        AsynchronousClient = new ApiClient(Configuration);
        ExceptionFactory = BlinkDebitApiClient.Config.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class
    /// using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public QuickPaymentsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException(nameof(configuration));

        Configuration = BlinkDebitApiClient.Config.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration);
        AsynchronousClient = new ApiClient(Configuration);
        ExceptionFactory = BlinkDebitApiClient.Config.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public QuickPaymentsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        Client = client ?? throw new ArgumentNullException(nameof(client));
        AsynchronousClient = asyncClient ?? throw new ArgumentNullException(nameof(asyncClient));
        Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        ExceptionFactory = BlinkDebitApiClient.Config.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
            {
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            }

            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CreateQuickPaymentResponse</returns>
    public CreateQuickPaymentResponse CreateQuickPayment(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0)
    {
        var localVarResponse = CreateQuickPaymentWithHttpInfo(requestId, xCorrelationId, xCustomerIp,
            idempotencyKey, quickPaymentRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CreateQuickPaymentResponse</returns>
    public ApiResponse<CreateQuickPaymentResponse> CreateQuickPaymentWithHttpInfo(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = new[]
        {
            "application/json"
        };

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        if (xCustomerIp != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-customer-ip",
                ClientUtils.ParameterToString(xCustomerIp)); // header parameter
        }

        if (idempotencyKey != null)
        {
            localVarRequestOptions.HeaderParameters.Add("idempotency-key",
                ClientUtils.ParameterToString(idempotencyKey)); // header parameter
        }

        if (quickPaymentRequest != null) localVarRequestOptions.Data = quickPaymentRequest;

        localVarRequestOptions.Operation = "QuickPaymentsApi.CreateQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse =
            Client.Post<CreateQuickPaymentResponse>("/quick-payments", localVarRequestOptions, Configuration);
        var exception = ExceptionFactory("CreateQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreateQuickPaymentResponse</returns>
    public async Task<CreateQuickPaymentResponse> CreateQuickPaymentAsync(Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?),
        Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        var localVarResponse = await CreateQuickPaymentWithHttpInfoAsync(requestId, xCorrelationId, xCustomerIp,
            idempotencyKey, quickPaymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="xCustomerIp">The customers IP address (optional)</param>
    /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
    /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateQuickPaymentResponse)</returns>
    public async Task<ApiResponse<CreateQuickPaymentResponse>> CreateQuickPaymentWithHttpInfoAsync(
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?),
        string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?),
        QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = new[]
        {
            "application/json"
        };

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        if (xCustomerIp != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-customer-ip",
                ClientUtils.ParameterToString(xCustomerIp)); // header parameter
        }

        if (idempotencyKey != null)
        {
            localVarRequestOptions.HeaderParameters.Add("idempotency-key",
                ClientUtils.ParameterToString(idempotencyKey)); // header parameter
        }

        if (quickPaymentRequest != null) localVarRequestOptions.Data = quickPaymentRequest;

        localVarRequestOptions.Operation = "QuickPaymentsApi.CreateQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<CreateQuickPaymentResponse>("/quick-payments", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);
        var exception = ExceptionFactory("CreateQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get Quick Payment Get a quick payment by ID.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>QuickPaymentResponse</returns>
    public QuickPaymentResponse GetQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
    {
        var localVarResponse = GetQuickPaymentWithHttpInfo(quickPaymentId, requestId, xCorrelationId);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get Quick Payment Get a quick payment by ID.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of QuickPaymentResponse</returns>
    public ApiResponse<QuickPaymentResponse> GetQuickPaymentWithHttpInfo(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = new[]
        {
            "application/json"
        };

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("quick_payment_id",
            ClientUtils.ParameterToString(quickPaymentId)); // path parameter
        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        localVarRequestOptions.Operation = "QuickPaymentsApi.GetQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse = Client.Get<QuickPaymentResponse>("/quick-payments/{quick_payment_id}",
            localVarRequestOptions, Configuration);
        var exception = ExceptionFactory("GetQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// Get Quick Payment Get a quick payment by ID.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuickPaymentResponse</returns>
    public async Task<QuickPaymentResponse> GetQuickPaymentAsync(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        var localVarResponse =
            await GetQuickPaymentWithHttpInfoAsync(quickPaymentId, requestId, xCorrelationId, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// Get Quick Payment Get a quick payment by ID.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (QuickPaymentResponse)</returns>
    public async Task<ApiResponse<QuickPaymentResponse>> GetQuickPaymentWithHttpInfoAsync(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = Array.Empty<string>();

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("quick_payment_id",
            ClientUtils.ParameterToString(quickPaymentId)); // path parameter
        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        localVarRequestOptions.Operation = "QuickPaymentsApi.GetQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<QuickPaymentResponse>("/quick-payments/{quick_payment_id}", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);
        var exception = ExceptionFactory("GetQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void RevokeQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
    {
        RevokeQuickPaymentWithHttpInfo(quickPaymentId, requestId, xCorrelationId);
    }

    /// <summary>
    /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<Object> RevokeQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = Array.Empty<string>();

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("quick_payment_id",
            ClientUtils.ParameterToString(quickPaymentId)); // path parameter
        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        localVarRequestOptions.Operation = "QuickPaymentsApi.RevokeQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse = Client.Delete<Object>("/quick-payments/{quick_payment_id}", localVarRequestOptions,
            Configuration);
        var exception = ExceptionFactory("RevokeQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task RevokeQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?),
        Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        await RevokeQuickPaymentWithHttpInfoAsync(quickPaymentId, requestId, xCorrelationId, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
    /// </summary>
    /// <exception cref="BlinkServiceException">Thrown when an exception occurs</exception>
    /// <param name="quickPaymentId">The quick payment ID</param>
    /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
    /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<Object>> RevokeQuickPaymentWithHttpInfoAsync(Guid quickPaymentId,
        Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0,
        CancellationToken cancellationToken = default(CancellationToken))
    {
        var localVarRequestOptions = new RequestOptions();

        var contentTypes = Array.Empty<string>();

        // to determine the Accept header
        var accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(contentTypes);
        localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(accepts);
        localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("quick_payment_id",
            ClientUtils.ParameterToString(quickPaymentId)); // path parameter
        if (requestId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("request-id",
                ClientUtils.ParameterToString(requestId)); // header parameter
        }

        if (xCorrelationId != null)
        {
            localVarRequestOptions.HeaderParameters.Add("x-correlation-id",
                ClientUtils.ParameterToString(xCorrelationId)); // header parameter
        }

        localVarRequestOptions.Operation = "QuickPaymentsApi.RevokeQuickPayment";
        localVarRequestOptions.OperationIndex = operationIndex;

        // authentication (Bearer) required
        // oauth required
        if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
        {
            if (!string.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + Configuration.AccessToken);
            }
            else if (!string.IsNullOrEmpty(Configuration.OAuthTokenUrl) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientId) &&
                     !string.IsNullOrEmpty(Configuration.OAuthClientSecret) &&
                     Configuration.OAuthFlow != null)
            {
                localVarRequestOptions.OAuth = true;
            }
        }

        // make the HTTP request
        var localVarResponse = await AsynchronousClient.DeleteAsync<Object>("/quick-payments/{quick_payment_id}",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);
        var exception = ExceptionFactory("RevokeQuickPayment", localVarResponse);
        if (exception != null)
        {
            throw exception;
        }

        return localVarResponse;
    }
}
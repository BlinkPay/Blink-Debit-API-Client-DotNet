/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Client.Auth;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Quick Payment
        /// </summary>
        /// <remarks>
        /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateQuickPaymentResponse</returns>
        CreateQuickPaymentResponse CreateQuickPayment(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0);

        /// <summary>
        /// Create Quick Payment
        /// </summary>
        /// <remarks>
        /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateQuickPaymentResponse</returns>
        ApiResponse<CreateQuickPaymentResponse> CreateQuickPaymentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Quick Payment
        /// </summary>
        /// <remarks>
        /// Get a quick payment by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuickPaymentResponse</returns>
        QuickPaymentResponse GetQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Quick Payment
        /// </summary>
        /// <remarks>
        /// Get a quick payment by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuickPaymentResponse</returns>
        ApiResponse<QuickPaymentResponse> GetQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Revoke Quick Payment
        /// </summary>
        /// <remarks>
        /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Revoke Quick Payment
        /// </summary>
        /// <remarks>
        /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Quick Payment
        /// </summary>
        /// <remarks>
        /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateQuickPaymentResponse</returns>
        System.Threading.Tasks.Task<CreateQuickPaymentResponse> CreateQuickPaymentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Quick Payment
        /// </summary>
        /// <remarks>
        /// Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateQuickPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateQuickPaymentResponse>> CreateQuickPaymentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Quick Payment
        /// </summary>
        /// <remarks>
        /// Get a quick payment by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickPaymentResponse</returns>
        System.Threading.Tasks.Task<QuickPaymentResponse> GetQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Quick Payment
        /// </summary>
        /// <remarks>
        /// Get a quick payment by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuickPaymentResponse>> GetQuickPaymentWithHttpInfoAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Quick Payment
        /// </summary>
        /// <remarks>
        /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Quick Payment
        /// </summary>
        /// <remarks>
        /// Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeQuickPaymentWithHttpInfoAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuickPaymentsApi : IQuickPaymentsApiSync, IQuickPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuickPaymentsApi : IQuickPaymentsApi
    {
        private BlinkDebitApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuickPaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuickPaymentsApi(string basePath)
        {
            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                new BlinkDebitApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuickPaymentsApi(BlinkDebitApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public QuickPaymentsApi(BlinkDebitApiClient.Client.ISynchronousClient client, BlinkDebitApiClient.Client.IAsynchronousClient asyncClient, BlinkDebitApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlinkDebitApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlinkDebitApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateQuickPaymentResponse</returns>
        public CreateQuickPaymentResponse CreateQuickPayment(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateQuickPaymentResponse> localVarResponse = CreateQuickPaymentWithHttpInfo(requestId, xCorrelationId, xCustomerIp, idempotencyKey, quickPaymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateQuickPaymentResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<CreateQuickPaymentResponse> CreateQuickPaymentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quickPaymentRequest;

            localVarRequestOptions.Operation = "QuickPaymentsApi.CreateQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateQuickPaymentResponse>("/quick-payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateQuickPaymentResponse</returns>
        public async System.Threading.Tasks.Task<CreateQuickPaymentResponse> CreateQuickPaymentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateQuickPaymentResponse> localVarResponse = await CreateQuickPaymentWithHttpInfoAsync(requestId, xCorrelationId, xCustomerIp, idempotencyKey, quickPaymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Quick Payment Create a quick payment, which both obtains the consent and debits the requested one-off payment.  This endpoint begins the customer consent process. Once the consent is authorised, Blink automatically attempts to debit the payment.  A successful response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the single payment endpoint.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="quickPaymentRequest">The single payment request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateQuickPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<CreateQuickPaymentResponse>> CreateQuickPaymentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), QuickPaymentRequest? quickPaymentRequest = default(QuickPaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = quickPaymentRequest;

            localVarRequestOptions.Operation = "QuickPaymentsApi.CreateQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateQuickPaymentResponse>("/quick-payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QuickPaymentResponse</returns>
        public QuickPaymentResponse GetQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<QuickPaymentResponse> localVarResponse = GetQuickPaymentWithHttpInfo(quickPaymentId, requestId, xCorrelationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QuickPaymentResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<QuickPaymentResponse> GetQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quick_payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(quickPaymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "QuickPaymentsApi.GetQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuickPaymentResponse>("/quick-payments/{quick_payment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuickPaymentResponse</returns>
        public async System.Threading.Tasks.Task<QuickPaymentResponse> GetQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<QuickPaymentResponse> localVarResponse = await GetQuickPaymentWithHttpInfoAsync(quickPaymentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quick Payment Get a quick payment by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuickPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<QuickPaymentResponse>> GetQuickPaymentWithHttpInfoAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quick_payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(quickPaymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "QuickPaymentsApi.GetQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QuickPaymentResponse>("/quick-payments/{quick_payment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeQuickPayment(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            RevokeQuickPaymentWithHttpInfo(quickPaymentId, requestId, xCorrelationId);
        }

        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Object> RevokeQuickPaymentWithHttpInfo(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quick_payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(quickPaymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "QuickPaymentsApi.RevokeQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/quick-payments/{quick_payment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeQuickPaymentAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeQuickPaymentWithHttpInfoAsync(quickPaymentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Quick Payment Revoke an existing (unpaid) quick payment by ID.  The quick payment cannot be revoked if the payment has already been made.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="quickPaymentId">The quick payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Object>> RevokeQuickPaymentWithHttpInfoAsync(Guid quickPaymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("quick_payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(quickPaymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "QuickPaymentsApi.RevokeQuickPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/quick-payments/{quick_payment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeQuickPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

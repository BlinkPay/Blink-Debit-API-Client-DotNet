/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Client.Auth;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentResponse</returns>
        PaymentResponse CreatePayment(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0);

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentResponse</returns>
        ApiResponse<PaymentResponse> CreatePaymentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get a payment and its status by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        Payment GetPayment(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get a payment and its status by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GetPaymentWithHttpInfo(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentResponse</returns>
        System.Threading.Tasks.Task<PaymentResponse> CreatePaymentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentResponse>> CreatePaymentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get a payment and its status by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GetPaymentAsync(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Get a payment and its status by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GetPaymentWithHttpInfoAsync(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IPaymentsApiSync, IPaymentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private BlinkDebitApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(string basePath)
        {
            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                new BlinkDebitApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(BlinkDebitApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentsApi(BlinkDebitApiClient.Client.ISynchronousClient client, BlinkDebitApiClient.Client.IAsynchronousClient asyncClient, BlinkDebitApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlinkDebitApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlinkDebitApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaymentResponse</returns>
        public PaymentResponse CreatePayment(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<PaymentResponse> localVarResponse = CreatePaymentWithHttpInfo(requestId, xCorrelationId, idempotencyKey, paymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaymentResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<PaymentResponse> CreatePaymentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymentResponse>("/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymentResponse</returns>
        public async System.Threading.Tasks.Task<PaymentResponse> CreatePaymentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<PaymentResponse> localVarResponse = await CreatePaymentWithHttpInfoAsync(requestId, xCorrelationId, idempotencyKey, paymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Create a payment request with a given customer consent. This creates a single, direct credit payment.  A 200 response does **not** indicate a successful debit. The payment status can be checked by subsequent calls to the returned payment object.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="paymentRequest">The particulars of the charge.  The enduring request paramaters are included if the payment relates to an enduring consent. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymentResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<PaymentResponse>> CreatePaymentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), Guid? idempotencyKey = default(Guid?), PaymentRequest? paymentRequest = default(PaymentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = paymentRequest;

            localVarRequestOptions.Operation = "PaymentsApi.CreatePayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PaymentResponse>("/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Payment</returns>
        public Payment GetPayment(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<Payment> localVarResponse = GetPaymentWithHttpInfo(paymentId, requestId, xCorrelationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Payment</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Payment> GetPaymentWithHttpInfo(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Payment>("/payments/{payment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GetPaymentAsync(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<Payment> localVarResponse = await GetPaymentWithHttpInfoAsync(paymentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Get a payment and its status by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymentId">The payment ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Payment>> GetPaymentWithHttpInfoAsync(Guid paymentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("payment_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(paymentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "PaymentsApi.GetPayment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Payment>("/payments/{payment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPayment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

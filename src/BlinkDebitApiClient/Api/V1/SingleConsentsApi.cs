/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Client.Auth;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISingleConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Single Consent
        /// </summary>
        /// <remarks>
        /// Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConsentResponse</returns>
        CreateConsentResponse CreateSingleConsent(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0);

        /// <summary>
        /// Create Single Consent
        /// </summary>
        /// <remarks>
        /// Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConsentResponse</returns>
        ApiResponse<CreateConsentResponse> CreateSingleConsentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Single Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Consent</returns>
        Consent GetSingleConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Single Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Consent</returns>
        ApiResponse<Consent> GetSingleConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Revoke Single Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeSingleConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Revoke Single Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeSingleConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISingleConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Single Consent
        /// </summary>
        /// <remarks>
        /// Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConsentResponse</returns>
        System.Threading.Tasks.Task<CreateConsentResponse> CreateSingleConsentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Single Consent
        /// </summary>
        /// <remarks>
        /// Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateConsentResponse>> CreateSingleConsentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Single Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Consent</returns>
        System.Threading.Tasks.Task<Consent> GetSingleConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Single Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Consent)</returns>
        System.Threading.Tasks.Task<ApiResponse<Consent>> GetSingleConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Single Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeSingleConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Single Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeSingleConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISingleConsentsApi : ISingleConsentsApiSync, ISingleConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SingleConsentsApi : ISingleConsentsApi
    {
        private BlinkDebitApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SingleConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SingleConsentsApi(string basePath)
        {
            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                new BlinkDebitApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SingleConsentsApi(BlinkDebitApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SingleConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SingleConsentsApi(BlinkDebitApiClient.Client.ISynchronousClient client, BlinkDebitApiClient.Client.IAsynchronousClient asyncClient, BlinkDebitApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlinkDebitApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlinkDebitApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Single Consent Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConsentResponse</returns>
        public CreateConsentResponse CreateSingleConsent(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> localVarResponse = CreateSingleConsentWithHttpInfo(requestId, xCorrelationId, xCustomerIp, idempotencyKey, singleConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Single Consent Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConsentResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> CreateSingleConsentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = singleConsentRequest;

            localVarRequestOptions.Operation = "SingleConsentsApi.CreateSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateConsentResponse>("/single-consents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Single Consent Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConsentResponse</returns>
        public async System.Threading.Tasks.Task<CreateConsentResponse> CreateSingleConsentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> localVarResponse = await CreateSingleConsentWithHttpInfoAsync(requestId, xCorrelationId, xCustomerIp, idempotencyKey, singleConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Single Consent Create a single payment consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="singleConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConsentResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse>> CreateSingleConsentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), SingleConsentRequest? singleConsentRequest = default(SingleConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = singleConsentRequest;

            localVarRequestOptions.Operation = "SingleConsentsApi.CreateSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateConsentResponse>("/single-consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Consent</returns>
        public Consent GetSingleConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<Consent> localVarResponse = GetSingleConsentWithHttpInfo(consentId, requestId, xCorrelationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Consent</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Consent> GetSingleConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "SingleConsentsApi.GetSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Consent>("/single-consents/{consent_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Single Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Consent</returns>
        public async System.Threading.Tasks.Task<Consent> GetSingleConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<Consent> localVarResponse = await GetSingleConsentWithHttpInfoAsync(consentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Consent)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Consent>> GetSingleConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "SingleConsentsApi.GetSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Consent>("/single-consents/{consent_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Single Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeSingleConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            RevokeSingleConsentWithHttpInfo(consentId, requestId, xCorrelationId);
        }

        /// <summary>
        /// Revoke Single Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Object> RevokeSingleConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "SingleConsentsApi.RevokeSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/single-consents/{consent_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Single Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeSingleConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeSingleConsentWithHttpInfoAsync(consentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Single Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Object>> RevokeSingleConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "SingleConsentsApi.RevokeSingleConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/single-consents/{consent_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeSingleConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Blink Debit (PayNow and AutoPay) Payments API
 *
 * APIs to execute Direct Credit payments for customers who use online banking with supported banks.  These APIs power **Blink PayNow** enabling one-off payments, and **Blink AutoPay** enabling recurring payments.  **Request IDs** Request IDs are included in the header in every response, to assist in tracing and debugging.  **API Change Policy** Additive changes may be made to request query parameters and JSON responses. To preserve backward compatibility, endpoint naming updates or JSON elements that already exist will not be removed or renamed until a major version (URL) change. This policy applies only after the official v1 release.
 *
 * The version of the OpenAPI document: 1.0.19
 * Contact: sysadmin@blinkpay.co.nz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BlinkDebitApiClient.Client;
using BlinkDebitApiClient.Client.Auth;
using BlinkDebitApiClient.Model.V1;

namespace BlinkDebitApiClient.Api.V1
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnduringConsentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Enduring Consent
        /// </summary>
        /// <remarks>
        /// Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConsentResponse</returns>
        CreateConsentResponse CreateEnduringConsent(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0);

        /// <summary>
        /// Create Enduring Consent
        /// </summary>
        /// <remarks>
        /// Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConsentResponse</returns>
        ApiResponse<CreateConsentResponse> CreateEnduringConsentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Enduring Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Consent</returns>
        Consent GetEnduringConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Get Enduring Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Consent</returns>
        ApiResponse<Consent> GetEnduringConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Revoke Enduring Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RevokeEnduringConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Revoke Enduring Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeEnduringConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnduringConsentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Enduring Consent
        /// </summary>
        /// <remarks>
        /// Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConsentResponse</returns>
        System.Threading.Tasks.Task<CreateConsentResponse> CreateEnduringConsentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Enduring Consent
        /// </summary>
        /// <remarks>
        /// Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConsentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateConsentResponse>> CreateEnduringConsentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Enduring Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Consent</returns>
        System.Threading.Tasks.Task<Consent> GetEnduringConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Enduring Consent
        /// </summary>
        /// <remarks>
        /// Get an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Consent)</returns>
        System.Threading.Tasks.Task<ApiResponse<Consent>> GetEnduringConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Revoke Enduring Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeEnduringConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Revoke Enduring Consent
        /// </summary>
        /// <remarks>
        /// Revoke an existing consent by ID.
        /// </remarks>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeEnduringConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEnduringConsentsApi : IEnduringConsentsApiSync, IEnduringConsentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EnduringConsentsApi : IEnduringConsentsApi
    {
        private BlinkDebitApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnduringConsentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EnduringConsentsApi(string basePath)
        {
            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                new BlinkDebitApiClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EnduringConsentsApi(BlinkDebitApiClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BlinkDebitApiClient.Client.Configuration.MergeConfigurations(
                BlinkDebitApiClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BlinkDebitApiClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EnduringConsentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EnduringConsentsApi(BlinkDebitApiClient.Client.ISynchronousClient client, BlinkDebitApiClient.Client.IAsynchronousClient asyncClient, BlinkDebitApiClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BlinkDebitApiClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BlinkDebitApiClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BlinkDebitApiClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BlinkDebitApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Enduring Consent Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConsentResponse</returns>
        public CreateConsentResponse CreateEnduringConsent(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> localVarResponse = CreateEnduringConsentWithHttpInfo(requestId, xCorrelationId, xCustomerIp, idempotencyKey, enduringConsentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Enduring Consent Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConsentResponse</returns>
        public BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> CreateEnduringConsentWithHttpInfo(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = enduringConsentRequest;

            localVarRequestOptions.Operation = "EnduringConsentsApi.CreateEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateConsentResponse>("/enduring-consents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Enduring Consent Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConsentResponse</returns>
        public async System.Threading.Tasks.Task<CreateConsentResponse> CreateEnduringConsentAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse> localVarResponse = await CreateEnduringConsentWithHttpInfoAsync(requestId, xCorrelationId, xCustomerIp, idempotencyKey, enduringConsentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Enduring Consent Create an enduring consent request with the bank that will go to the customer for approval.  A successful response does not indicate a completed consent. The status of the consent can be subsequently checked with the consent ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="xCustomerIp">The customers IP address (optional)</param>
        /// <param name="idempotencyKey">An optional idempotency key to prevent duplicate submissions. (optional)</param>
        /// <param name="enduringConsentRequest">The consent request parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConsentResponse)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<CreateConsentResponse>> CreateEnduringConsentWithHttpInfoAsync(Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), string? xCustomerIp = default(string?), Guid? idempotencyKey = default(Guid?), EnduringConsentRequest? enduringConsentRequest = default(EnduringConsentRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }
            if (xCustomerIp != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-customer-ip", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCustomerIp)); // header parameter
            }
            if (idempotencyKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("idempotency-key", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(idempotencyKey)); // header parameter
            }
            localVarRequestOptions.Data = enduringConsentRequest;

            localVarRequestOptions.Operation = "EnduringConsentsApi.CreateEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateConsentResponse>("/enduring-consents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Enduring Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Consent</returns>
        public Consent GetEnduringConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.ApiResponse<Consent> localVarResponse = GetEnduringConsentWithHttpInfo(consentId, requestId, xCorrelationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Enduring Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Consent</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Consent> GetEnduringConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "EnduringConsentsApi.GetEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Consent>("/enduring-consents/{consent_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Enduring Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Consent</returns>
        public async System.Threading.Tasks.Task<Consent> GetEnduringConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BlinkDebitApiClient.Client.ApiResponse<Consent> localVarResponse = await GetEnduringConsentWithHttpInfoAsync(consentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Enduring Consent Get an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Consent)</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Consent>> GetEnduringConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "EnduringConsentsApi.GetEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Consent>("/enduring-consents/{consent_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Enduring Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RevokeEnduringConsent(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            RevokeEnduringConsentWithHttpInfo(consentId, requestId, xCorrelationId);
        }

        /// <summary>
        /// Revoke Enduring Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BlinkDebitApiClient.Client.ApiResponse<Object> RevokeEnduringConsentWithHttpInfo(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0)
        {
            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "EnduringConsentsApi.RevokeEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/enduring-consents/{consent_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Revoke Enduring Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeEnduringConsentAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RevokeEnduringConsentWithHttpInfoAsync(consentId, requestId, xCorrelationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Revoke Enduring Consent Revoke an existing consent by ID.
        /// </summary>
        /// <exception cref="BlinkDebitApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="consentId">The consent ID</param>
        /// <param name="requestId">An optional request ID. If provided, it overrides the interaction ID generated by Blink Debit. (optional)</param>
        /// <param name="xCorrelationId">An optional correlation ID for logging chain of events. If provided, it overrides the correlation ID generated by Blink Debit. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BlinkDebitApiClient.Client.ApiResponse<Object>> RevokeEnduringConsentWithHttpInfoAsync(Guid consentId, Guid? requestId = default(Guid?), Guid? xCorrelationId = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BlinkDebitApiClient.Client.RequestOptions localVarRequestOptions = new BlinkDebitApiClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BlinkDebitApiClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("consent_id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(consentId)); // path parameter
            if (requestId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("request-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(requestId)); // header parameter
            }
            if (xCorrelationId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("x-correlation-id", BlinkDebitApiClient.Client.ClientUtils.ParameterToString(xCorrelationId)); // header parameter
            }

            localVarRequestOptions.Operation = "EnduringConsentsApi.RevokeEnduringConsent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/enduring-consents/{consent_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeEnduringConsent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
